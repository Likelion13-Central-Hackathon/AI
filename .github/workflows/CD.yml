name: CD - FastAPI over SSH

on:
  workflow_run:
    workflows: ["CI - FastAPI"] # CI 워크플로우 이름
    types: [completed] # CI가 끝났을 때 트리거
    branches: ["main"]
      
concurrency:
  group: cd-fastapi
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    # CI 성공이고 main 브랜치일때만 배포
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    
    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4

      - name: Deploy over SSH
        id: ssh
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            APP_DIR="${{ secrets.APP_DIR }}"
            LOG_DIR="$APP_DIR/logs"
            LOG_FILE="$LOG_DIR/uvicorn.log"
            TS="$(date +%Y%m%d-%H%M%S)"

            # 0) 작업 디렉터리로 이동
            cd "$APP_DIR"

            # 1) 최신 코드 가져오기
            git pull

            # 2) .env 가져오기
            printf '%s' "${{ secrets.ENV_FILE }}" > .env

            # 3) venv 활성화
            if [ -f ".venv/bin/activate" ]; then
              . .venv/bin/activate
            else # 없으면 깔고 활성화
              python3 -m venv .venv
              . .venv/bin/activate
            fi

            # requirements 돌리기(의존성 가져오기)
            pip install -r requirements.txt -q 

            # 4) 로그 파일 준비 및 용량 체크 (>20MB이상이면 압축)
            mkdir -p "$LOG_DIR"
            touch "$LOG_FILE"
            if [ -f "$LOG_FILE" ] && [ "$(du -m "$LOG_FILE" | cut -f1)" -ge 20 ]; then
              mv "$LOG_FILE" "$LOG_DIR/uvicorn-$TS.log"
              gzip -f "$LOG_DIR/uvicorn-$TS.log" || true # 압축
              : > "$LOG_FILE"
              echo "[info] Log rotated: $LOG_DIR/uvicorn-$TS.log.gz"
            fi

            # 5) 기존 8000포트로 돌고있는 서버가 있다면 중단 시키기
            if command -v lsof >/dev/null 2>&1; then
              PIDS=$(lsof -t -i:8000)
              if [ -n "$PIDS" ]; then
                kill $PIDS
                sleep 2
                kill -9 $PIDS 2>/dev/null || true
                echo "[info] 8000 포트에서 돌고 있는 프로세스 중단"
              fi
            else
              pkill -f "uvicorn.*8000" || true
            fi

            # 6) 서버 재가동 
            nohup python -m uvicorn main:app \
              --host 0.0.0.0 --port 8000 \
              --workers 2 --log-level info \
              --proxy-headers --forwarded-allow-ips='*' \
              >> "$LOG_FILE" 2>&1 & disown

            # 7) 헬스체크 (최대 20초)
            echo "[info] 헬스 체크 시작"
            ok=false
            for i in $(seq 1 10); do
              if curl -fsS http://127.0.0.1:8000/health >/dev/null 2>&1; then
                ok=true
                echo "[info] Health check passed on attempt #$i"
                break
              fi
              echo "[info] Waiting for app.. ($i/10)"
              sleep 2
            done
            if [ "$ok" != true ]; then
              echo "[error] 헬스 체크 실패. 로그 저장:"
              tail -n 200 "$LOG_FILE" || true
              exit 1
            fi

            echo "[done] FastAPI deployed & restarted on :8000"
            echo "[info] Logs: $LOG_FILE"
